/*
 * Copyright (c) 2020 Cryptic Mushroom and contributors
 * This file belongs to the Midnight mod and is licensed under the terms and conditions of Cryptic Mushroom. See
 * https://github.com/Cryptic-Mushroom/The-Midnight/blob/rewrite/LICENSE.md for the full license.
 *
 * Last updated: 2021 - 7 - 4
 */

/*
 * GradleWorks for ForgeGradle 4/3
 * Written by Jonathing
 * Version 3.3.2
 *
 * This gradle file contains additional instructions for signing builds of this mod.
 */

// Get a variable from gradle.properties, or return null if it doesn't exist.
String getVariable(String key) {
    return rootProject.hasProperty(key) ? rootProject.property(key) : null
}

project.ext.canJarBeSigned = { return canJarBeSigned() }
project.ext.getProjectFingerprint = { return getProjectFingerprint() }
project.ext.sign = { File jar -> return sign(jar) }

// Ensures that the signJar task will run on every build
// REMINDER: the jar will not be signed if the mnKeyStore key in gradle.properties does not exist
build {
    dependsOn 'signJar'
}

// detects if the mnKeyStore key in gradle.properties exists so the jar can be signed
def canJarBeSigned() {
    return getVariable('mnKeyStore') != null
}

// Returns the public fingerprint, may be empty ("")
def getProjectFingerprint() {
    if (canJarBeSigned()) {
        def sha256 = getVariable('mnKeyStoreSHA256')
        return sha256 != null ? sha256 : ''
    }
}

// Signs a jar file
def sign(File jar) {
    if (canJarBeSigned()) {
        println("Attempting to sign jar: ${jar}".toString())
        ant.signjar(
            destDir: "${jar.parentFile}",
            jar: "${jar}",
            alias: getVariable('mnKeyStoreAlias'),
            storetype: "jks",
            keystore: getVariable("mnKeyStore"),
            storepass: getVariable('mnKeyStorePass'),
            keypass: getVariable('mnKeyStoreKeyPass'),
            verbose: true,
            preservelastmodified: "true"
        )
        println("Jar signed: ${jar}".toString())
    } else {
        println('No keystore property found, jar will not be signed')
    }
}

// Gradle task to sign the jar.
task signJar(dependsOn: 'reobfJar') {
    doLast {
        project.ext.sign(jar.archivePath)
    }
}
