# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java#publishing-using-gradle

name: The Midnight (1.16.1)

on:
  push:
    branches:
      - 1.16.1
    paths-ignore:
      - 'curseforge/**'
      - 'versioninfo/**'
      - 'README.md'
      - 'LICENSE'
      - 'changelog.json'
      - '.gitignore'
      - '.gitattributes'
    tags-ignore:
      - '*.*'

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Update CI Workspace
      uses: actions/checkout@v1

    - name: Prepare to build The Midnight
      env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add - <<< "${{ secrets.SSH_PRIVATE_KEY }}"
          git clone git@github.com:${{ secrets.PRIVATE_REPO }}
          echo "" >> gradle.properties
          echo "mnKeyStore=${{ secrets.JKS_NAME }}" >> gradle.properties
          echo "mnKeyStoreAlias=${{ secrets.JKS_ALIAS }}" >> gradle.properties
          echo "mnKeyStorePass=${{ secrets.JKS_PASS }}" >> gradle.properties
          echo "mnKeyStoreKeyPass=${{ secrets.JKS_PASS }}" >> gradle.properties
          cp Midnight-Private/${{ secrets.JKS_NAME }} MidnightAPI/${{ secrets.JKS_NAME }}
          cp Midnight-Private/${{ secrets.JKS_NAME }} MidnightCore/${{ secrets.JKS_NAME }}
          cp Midnight-Private/${{ secrets.JKS_NAME }} MidnightMod/${{ secrets.JKS_NAME }}


    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
        java-package: jdk
        architecture: x64

    - name: Build The Midnight
      uses: eskatos/gradle-command-action@v1
      with:
        gradle-version: 4.10.3
        arguments: build

    - name: Upload The Midnight API to GitHub
      uses: actions/upload-artifact@v2
      with:
        # Artifact name
        name: midnight-api-${{ github.sha }}
        # A file, directory or wildcard pattern that describes what to upload
        path: MidnightAPI/build/libs/*.jar

    - name: Upload The Midnight Core to GitHub
      uses: actions/upload-artifact@v2
      with:
        # Artifact name
        name: midnight-core-${{ github.sha }}
        # A file, directory or wildcard pattern that describes what to upload
        path: MidnightCore/build/libs/*.jar

    - name: Upload The Midnight Client to GitHub
      uses: actions/upload-artifact@v2
      with:
        # Artifact name
        name: midnight-client-${{ github.sha }}
        # A file, directory or wildcard pattern that describes what to upload
        path: MidnightMod/build/libs/*client*.jar

    - name: Upload The Midnight Server to GitHub
      uses: actions/upload-artifact@v2
      with:
        # Artifact name
        name: midnight-server-${{ github.sha }}
        # A file, directory or wildcard pattern that describes what to upload
        path: MidnightMod/build/libs/*server*.jar

    - name: Upload The Midnight to GitHub
      uses: actions/upload-artifact@v2
      with:
        # Artifact name
        name: midnight-universal-${{ github.sha }}
        # A file, directory or wildcard pattern that describes what to upload
        path: MidnightMod/build/libs/*universal*.jar

  # test:

  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Update CI workspace
  #       uses: actions/checkout@v1

  #     - name: Set up JDK 1.8
  #       uses: actions/setup-java@v1
  #       with:
  #         java-version: 1.8
  #         java-package: jdk
  #         architecture: x64

  #     - name: Set up test server
  #       run: mkdir run; mkdir run/server; echo "eula=true" >> run/server/eula.txt; echo "Set eula to true."; echo "TEST FAILED" >> run/server/TESTSERVER.txt; echo "Generated TESTSERVER.txt file."

  #     - name: Run test server
  #       uses: eskatos/gradle-command-action@v1
  #       continue-on-error: true
  #       with:
  #         gradle-version: 4.10.3
  #         arguments: runServer

  #     - name: Read server test result
  #       id: log
  #       uses: andstor/file-reader-action@v1
  #       with:
  #         path: run/server/TESTSERVER.txt

  #     - name: Determine if server test was unsuccessful
  #       if: contains(steps.log.outputs.contents, 'TEST FAILED')
  #       run: echo "GitHub Actions was unable to successfully load the test server into a temporary world. Check the log in the \"Run test server\" step to see what went wrong."; exit 1