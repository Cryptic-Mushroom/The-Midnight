// To all contributors
// PLEASE REFRAIN FROM EDITING THIS build.gradle FILE UNLESS ABSOLUTELY NEEDED!!!

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

ext {
    timeOfExecution = new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
}

// ==================
// ALL PROJECTS SETUP
// ==================

allprojects {
    project.ext.implName = "The Midnight"

    apply plugin: 'net.minecraftforge.gradle'
    apply plugin: 'midnight.gradle' // See 'buildSrc'
    apply plugin: 'idea'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    // Initialize basic environment properties
    apply from: "$rootDir/environment.gradle"

    // ForgeGradle setup
    minecraft {
        mappings channel: 'snapshot', version: '20200712-1.16.1'

        // Access transformer
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    }

    midnight {
        shade('net.rgsw.ptg', 'midnight.internal.net.rgsw.ptg')

        changelogJson file("$rootDir/changelog.json")

        constant('mod_id', project.ext.modid)
        constant('mod_name', project.ext.implName)
        constant('version', changelogInfo.versionNumber)
        constant('version_name', changelogInfo.versionName)
        constant('group', project.group)
        constant('build_time', project.ext.timeOfExecution)
        constant('sha1') {
            !project.canJarBeSigned() ? "NO:FI:NG:ER:PR:IN:TA:VA:IL:AB:LE" : project.getProjectFingerprint()
        }
    }

    repositories {
        mavenCentral()
        maven {
            name = "Progwml6 maven"
            url = "https://dvs1.progwml6.com/files/maven/"
        }
        maven {
            name = "ModMaven"
            url = "https://modmaven.k-4u.nl/"
        }
        maven {
            url "https://io.terraforged.com/repository/maven/"
        }
        flatDir {
            dirs "$rootDir/dependencies"
        }
    }

    configurations {
        embed // External deps embedded into the JAR file
        compile.extendsFrom(embed)

        internal // Internal deps (subprojects) embedded into the JAR file
        compile.extendsFrom(internal)
    }

    dependencies {
        minecraft 'net.minecraftforge:forge:1.16.1-32.0.98'

        embed("net.rgsw:noise:1.0.5") {
            // The only transitive dependency is it.unimi.dsi:fastutil:8.2.1 - this is included with forge and we don't
            // need to embed it
            transitive false
        }

        compileOnly fg.deobf("mezz.jei:jei-1.16.1:7.0.0.3:api")
        runtimeOnly fg.deobf("mezz.jei:jei-1.16.1:7.0.0.3")

        // TODO Add TerraForged API dependency for 1.16.1
        // compileOnly "com.terraforged:TerraForgedAPI:1.15.2-0.0.1"
        // runtimeOnly fg.deobf("local:TerraForged:1.15.2-0.0.13")

        // TODO Add Biomes O' Plenty dependency for 1.16.1
        // compileOnly fg.deobf("local:BiomesOPlenty:1.15.2-10.0.0.345:api")
        // runtimeOnly fg.deobf("local:BiomesOPlenty:1.15.2-10.0.0.345:universal")
    }

    jar {
        doFirst {
            // Include necessary dependencies
            if (!project.name.endsWith("MidnightAPI")) {
                from configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }
            } else {
                println "Skipping dependency embedding for MidnightAPI build - they come with Maven"
            }

            from configurations.internal.collect { it.isDirectory() ? it : zipTree(it) }
        }

        manifest {
            attributes(
                    [
                            "Specification-Title"     : "The Midnight",
                            "Specification-Vendor"    : "Cryptic Mushroom",
                            "Specification-Version"   : "${version}",
                            "Implementation-Title"    : project.ext.implName,
                            "Implementation-Version"  : "${version}",
                            "Implementation-Vendor"   : "Cryptic Mushroom",
                            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
                    ]
            )
        }
    }

    project.shade.create("jar")

    apply from: "$rootDir/gensources.gradle"
}


// ==================
// ROOT PROJECT SETUP
// ==================

// We should not build anything in the root project so we remove all building tasks and only build the necessary
// subprojects. We only use the root project for running.
build {
    dependsOn.clear()

    dependsOn ':MidnightAPI:build'
    dependsOn ':MidnightMod:build'
}

// Configure run configurations only for root project
minecraft {
    runs {
        client {
            workingDirectory project.file('run/client')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'info'
            property 'midnight.iside', 'true'

            mods {
                midnight {
                    sources sourceSets.main, sourceSets.test
                }
            }
        }

        server {
            workingDirectory project.file('run/server')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'info'
            property 'midnight.iside', 'true'

            args 'nogui'

            mods {
                midnight {
                    sources sourceSets.main, sourceSets.test
                }
            }
        }

        data {
            workingDirectory project.file('run/data')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'info'
            property 'midnight.iside', 'true'
            property 'midnight.datagen', 'true'

            // Workaround for https://github.com/MinecraftForge/ForgeGradle/issues/690
            if (project.ext.isOsx()) {
                jvmArg("-XstartOnFirstThread")
            }

            args '--mod', 'midnight', '--all', '--output', file("MidnightMod/src/generated/resources/")

            mods {
                midnight {
                    sources sourceSets.main, sourceSets.test
                }
            }
        }
    }
}

midnight {
    updateJson file('versioninfo/update.json')
    markdownChangelog file('versioninfo/latest_changelog.md')
    markdownChangelog file("versioninfo/${changelogInfo.versionNumber}_changelog.md")
}


// Depend on all subprojects
dependencies {
    internal(project(':MidnightAPI')) {
        transitive false
    }
    internal(project(':MidnightCore')) {
        transitive false
    }
    internal(project(':MidnightMod')) {
        transitive false
    }
}

// Collect classes and resources from other projects so that running includes all classes

def remake(String path) {
    delete path
    file(path).mkdirs()
}

task collectClassPath {
    dependsOn ':MidnightAPI:classes'
    dependsOn ':MidnightCore:classes'
    dependsOn ':MidnightMod:classes'
    dependsOn ':compileJava'
    dependsOn ':processResources'

    doFirst {
        remake "$buildDir/resources/main"
        remake "$buildDir/classes/java/main"

        remake "out/production/resources"
        remake "out/production/classes"
    }
    doLast {
        configurations.collectMany {
            it.allDependencies
        }.findAll {
            it instanceof ProjectDependency
        }.each {
            ProjectDependency dep = (ProjectDependency) it
            copy {
                from("$dep.dependencyProject.buildDir/resources/main")
                into("$buildDir/resources/main")
            }
            copy {
                from("$dep.dependencyProject.buildDir/classes/java/main")
                into("$buildDir/classes/java/main")
            }
        }
        copy {
            from("$buildDir/resources/main")
            into("out/production/resources")
        }
        copy {
            from("$buildDir/classes/java/main")
            into("out/production/classes")
        }
    }
}

task collectTestClassPath {
    dependsOn ':MidnightAPI:testClasses'
    dependsOn ':MidnightCore:testClasses'
    dependsOn ':MidnightMod:testClasses'
    dependsOn ':compileTestJava'
    dependsOn ':processTestResources'

    doFirst {
        remake "$buildDir/resources/test"
        remake "$buildDir/classes/java/test"

        remake "out/test/resources"
        remake "out/test/classes"
    }
    doLast {
        configurations.collectMany {
            it.allDependencies
        }.findAll {
            it instanceof ProjectDependency
        }.each {
            ProjectDependency dep = (ProjectDependency) it
            copy {
                from("$dep.dependencyProject.buildDir/resources/test")
                into("$buildDir/resources/test")
            }
            copy {
                from("$dep.dependencyProject.buildDir/classes/java/test")
                into("$buildDir/classes/java/test")
            }
        }
        copy {
            from("$buildDir/resources/test")
            into("out/test/resources")
        }
        copy {
            from("$buildDir/classes/java/test")
            into("out/test/classes")
        }
    }
}

classes {
    dependsOn 'collectClassPath'
}

testClasses {
    dependsOn 'collectTestClassPath'
}

//task remakeClassesDir {
//    doFirst {
//        delete "$buildDir/classes/main"
//        file("$buildDir/classes/main").mkdirs()
//    }
//
//    outputs.upToDateWhen { t -> false }
//}
//
//task collectClasses(type: Copy) {
//    dependsOn ':MidnightAPI:classes'
//    dependsOn ':MidnightCore:classes'
//    dependsOn ':MidnightMod:classes'
//    dependsOn ':remakeClassesDir'
//
//    outputs.upToDateWhen { t -> false }
//
//    doFirst {
//        delete "$buildDir/classes/java/main"
//        file("$buildDir/classes/java/main").mkdirs()
//    }
//
//    configurations.collectMany {
//        it.allDependencies
//    }.findAll {
//        it instanceof ProjectDependency
//    }.each {
//        ProjectDependency dep = (ProjectDependency) it
//        from("$dep.dependencyProject.buildDir/classes/java/main")
//    }
//
//    into("$buildDir/classes/java/main")
//}
//
//task remakeTestClassesDir {
//    doFirst {
//        delete "$buildDir/classes/test"
//        file("$buildDir/classes/test").mkdirs()
//    }
//
//    outputs.upToDateWhen { t -> false }
//}
//
//task collectTestClasses(type: Copy) {
//    dependsOn ':MidnightAPI:testClasses'
//    dependsOn ':MidnightCore:testClasses'
//    dependsOn ':MidnightMod:testClasses'
//    dependsOn ':remakeTestClassesDir'
//
//    outputs.upToDateWhen { t -> false }
//
//    configurations.collectMany {
//        it.allDependencies
//    }.findAll {
//        it instanceof ProjectDependency
//    }.each {
//        ProjectDependency dep = (ProjectDependency) it
//        from("$dep.dependencyProject.buildDir/classes/java/test")
//    }
//
//    into("$buildDir/classes/java/test")
//}
//
//compileJava {
//    dependsOn 'collectClasses'
//}
//
//compileTestJava {
//    dependsOn 'collectTestClasses'
//}
//
//task remakeResourcesDir {
//    doFirst {
//        delete "$buildDir/resources/main"
//        file("$buildDir/resources/main").mkdirs()
//    }
//
//    outputs.upToDateWhen { t -> false }
//}
//
//task collectResources(type: Copy) {
//    dependsOn ':MidnightAPI:classes'
//    dependsOn ':MidnightCore:classes'
//    dependsOn ':MidnightMod:classes'
//    dependsOn ':remakeResourcesDir'
//
//    outputs.upToDateWhen { t -> false }
//
//    configurations.collectMany {
//        it.allDependencies
//    }.findAll {
//        it instanceof ProjectDependency
//    }.each {
//        ProjectDependency dep = (ProjectDependency) it
//        from("$dep.dependencyProject.buildDir/resources/main") {
//            into("$buildDir/resources/main")
//        }
//    }
//}
//
//task remakeTestResourcesDir {
//    doFirst {
//        delete "$buildDir/resources/test"
//        file("$buildDir/resources/test").mkdirs()
//    }
//
//    outputs.upToDateWhen { t -> false }
//}
//
//task collectTestResources(type: Copy) {
//    dependsOn ':MidnightAPI:testClasses'
//    dependsOn ':MidnightCore:testClasses'
//    dependsOn ':MidnightMod:testClasses'
//    dependsOn ':remakeTestResourcesDir'
//
//    outputs.upToDateWhen { t -> false }
//
//    configurations.collectMany {
//        it.allDependencies
//    }.findAll {
//        it instanceof ProjectDependency
//    }.each {
//        ProjectDependency dep = (ProjectDependency) it
//        from("$dep.dependencyProject.buildDir/resources/test")
//    }
//
//    into("$buildDir/resources/test")
//}

//processResources {
//    dependsOn 'collectResources'
//}
//
//processTestResources {
//    dependsOn 'collectTestResources'
//}

// These tasks are unnecessary for the root project...
jar {
    enabled false
}

injectConstants {
    enabled false
}

// Make version info task, just combines updateVersionJson and genChangelogMarkdown
task makeVersionInfo() {
    dependsOn updateVersionJson
    dependsOn genChangelogMarkdown
}