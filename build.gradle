/*
 * Copyright (c) 2020 Cryptic Mushroom and contributors
 * This file belongs to the Midnight mod and is licensed under the terms and conditions of Cryptic Mushroom. See
 * https://github.com/Cryptic-Mushroom/The-Midnight/blob/rewrite/LICENSE.md for the full license.
 *
 * Last updated: 2020 - 12 - 23
 */
// To all contributors
// PLEASE REFRAIN FROM EDITING THIS build.gradle FILE UNLESS ABSOLUTELY NEEDED!!!

buildscript {
    repositories {
        maven { url 'https://files.minecraftforge.net/maven' }
        maven { url 'https://repo.spongepowered.org/maven' }
        maven { url 'https://maven.shadew.net/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
        classpath group: 'net.shadew', name: 'modutil', version: '1.0-beta.10'
    }
}

ext {
    timeOfExecution = new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'net.shadew.modutil'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'signing'

// Initialize basic environment properties
apply from: "$rootDir/environment.gradle"

// These gotta be "compile" and not "implementation" or else genData won't work
configurations {
    embed // External deps embedded into the JAR file
    compile.extendsFrom(embed)

    internal // Internal deps (subprojects) embedded into the JAR file
    compile.extendsFrom(internal) // TODO Do we actually use this?
}

apply from: "$rootDir/dependencies.gradle"

// Mixin setup
mixin {
    add sourceSets.main, project.ext.mixinRefmap
}

// ModUtil setup
modutil {
    shade('net.shadew.ptg', "${project.ext.shadePackage}.net.shadew.ptg")
    shade('me.jonathing.minecraft.verificationutil', "midnight.core.security")

    changelogJson file("$rootDir/changelog.json")

    constant('mod_id', project.ext.modid)
    constant('mod_name', project.ext.implName)
    constant('version', changelogInfo.versionNumber)
    constant('version_name', changelogInfo.versionName)
    constant('group', project.group)
    constant('build_time', project.ext.timeOfExecution)
    constant('expected_sha256', project.getProjectFingerprint())

    constantAnnotation "$project.ext.constAnnotation"
}

jar {
    // Include necessary dependencies into the jar file
    doFirst {
        from configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }
        from configurations.internal.collect { it.isDirectory() ? it : zipTree(it) }
    }

    // Manifest properties
    manifest {
        attributes(
            [
                "Specification-Title"     : "${project.ext.implName}",
                "Specification-Vendor"    : "${project.ext.implAuthor}",
                "Specification-Version"   : "${project.ext.version}",
                "Implementation-Title"    : "${project.ext.implName}",
                "Implementation-Vendor"   : "${project.ext.implAuthor}",
                "Implementation-Version"  : "${project.ext.version}",
                "Implementation-Timestamp": "${project.ext.timeOfExecution}",
                "MixinConnector"          : "${project.ext.mixinConnector}"
            ]
        )
    }
}

injectConstants {
    doFirst { delete "$buildDir/sources" }
}

project.shade.create("jar")

processResources {
    doFirst {
        delete "$buildDir/resources" // Delete resources to fully clean up unused items
    }
    // Import png and ogg apart from other files as we don't want lines to be
    // replaced in such files...
    from( 'src/main/resources' ) {
        exclude '**/*.png'
        exclude '**/*.ogg'
        filter { line ->
            line.replaceAll( '\\$\\{version\\}', "$project.version" )
                .replaceAll( '\\$\\{verName\\}', "$project.versionName" )
        }
    }
    from( 'src/main/resources' ) {
        include '**/*.png'
        include '**/*.ogg'
    }

    exclude '**/unused/**'
    exclude 'src/main/resources/templates/**'
}

// Configure run configurations only for root project
minecraft {
    mappings channel: "${project.ext.getVariable("env.mappings.channel")}",
             version: "${project.ext.getVariable("env.mappings.version")}"

    accessTransformer = file("$rootDir/src/main/resources/META-INF/accesstransformer.cfg")

    runs {
        client {
            workingDirectory project.file('run/client')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'info'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg".toString()
            property 'midnight.iside', 'true'

            mods {
                midnight {
                    sources sourceSets.main, sourceSets.test
                }
            }
        }

        server {
            workingDirectory project.file('run/server')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'info'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg".toString()
            property 'midnight.iside', 'true'

            args 'nogui'

            mods {
                midnight {
                    sources sourceSets.main, sourceSets.test
                }
            }
        }

        testServer {
            parent minecraft.runs.server

            property 'minecraftdev.ci.istestserver', 'true'
        }

        data {
            workingDirectory project.file('run/data')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'info'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg".toString()
            property 'midnight.iside', 'true'
            property 'midnight.datagen', 'true'

            args '--mod', 'midnight',
                 '--all',
                 '--output', file("src/generated/resources/")

            mods {
                midnight {
                    sources sourceSets.main, sourceSets.test
                }
            }
        }
    }
}

apply from: "$rootDir/root.gradle"
